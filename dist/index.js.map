{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;;;;;AAAwB;AACqB;AAE7C,MAAM,WAAW,GAAG;IAClB,MAAM,EAAE,YAAY;IACpB,KAAK,EAAE,MAAsB,KAAK,MAAM;IACxC,UAAU,EAAE;QACV,IAAI,EAAE,WAAmB;QACzB,QAAQ,EAAE,MAAuB;QACjC,IAAI,EAAE,QAAmB;QACzB,QAAQ,EAAE,WAAuB;KAClC;IACD,IAAI,EAAE;QACJ,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,EAAE;KACR;IACD,UAAU,EAAE;QACV,SAAS,EAAE,iBAAiB;KAC7B;CACF,CAAC;AAEK,MAAM,QAAQ,GAAG,2CAAI,CAAC,sDAAc,CAAC,WAAW,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACnBF;AAcjD,MAAM,OAAO,GAAG,CAAO,EAAE,GAAG,EAAE,GAAG,EAAS,EAAE,EAAE;IAEnD,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC;IAGxD,IAAI,IAAkC;QAAE,qEAAiB,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACnE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACtB,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;ACrB2D;AACpB;AACA;AACsB;AACxB;AAEhC,MAAM,MAAM,GAAG,2EAAoB,CAAC;IACzC,QAAQ;IACR,SAAS,gDAAO,sDAAe,GAAK,iDAAS,GAAK,iDAAS,CAAE;CAC9D,CAAC,CAAC;;;;;;;;;;;;;;;ACHI,MAAM,iBAAiB,GAAG,CAAC,EAAE,GAAG,EAAS,EAAE,EAAE;;IAClD,IAAI;QACF,IAAI,IAAqC,EAAE;YACzC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK;gBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChD,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS;gBAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzD;aAAM,EAWN;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC3B;AACH,CAAC,CAAC;;;;;;;;;;;;;;;AC3BK,MAAM,SAAS,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;;;;;;;;;;;;;;;;ACDS;AACpC,MAAM,SAAS,qBAAQ,oDAAc,CAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACDG;AAE3C,MAAM,WAAW,GAAG,GAAS,EAAE;IACpC,MAAM,QAAQ,GAAG,MAAM,wDAAQ,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1D,OAAO,QAAQ,CAAC;AAClB,CAAC,EAAC;;;;;;;;;;;;;;;;ACL0C;AACrC,MAAM,cAAc,GAAG;IAC5B,KAAK,EAAE;QACL,WAAW;KACZ;CACF,CAAC;;;;;;;;;;;;;;;;;;;ACLkC;AACyB;AAEtD,MAAM,QAAQ,GAAG;IACtB,GAAG,qDAAc;IACjB,8CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkLF;CACF,CAAC;;;;;;;;;;;ACxLF;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACN6C;AACM;AACQ;AAEpD,MAAM,MAAM,GAAG,IAAI,uDAAY,CAAC;IACrC,MAAM;IACN,OAAO;IACP,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE;IACzC,aAAa,EAAE,aAAoB,KAAK,YAAY;CACrD,CAAC,CAAC;AAGH,KAAK,MAAM,CAAC,MAAM,CAAC,MAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;IAC7C,OAAO,CAAC,GAAG,CACT,6BAA6B,WAAgB,IAAI,MAAgB,EAAE,CACpE,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,KAAU,EAAE,EAGf","sources":["webpack://pg-demo/./src/apis/database.ts","webpack://pg-demo/./src/graphql/apollo/context.ts","webpack://pg-demo/./src/graphql/apollo/executableSchema.ts","webpack://pg-demo/./src/graphql/apollo/logGraphQlQueries.ts","webpack://pg-demo/./src/graphql/mutations/index.ts","webpack://pg-demo/./src/graphql/resolvers/index.ts","webpack://pg-demo/./src/graphql/resolvers/queries/allAirports.ts","webpack://pg-demo/./src/graphql/resolvers/queries/index.ts","webpack://pg-demo/./src/graphql/typedefs.ts","webpack://pg-demo/external commonjs \"@graphql-tools/schema\"","webpack://pg-demo/external commonjs \"apollo-server\"","webpack://pg-demo/external commonjs \"graphql-scalars\"","webpack://pg-demo/external commonjs \"knex\"","webpack://pg-demo/external commonjs \"knex-stringcase\"","webpack://pg-demo/webpack/bootstrap","webpack://pg-demo/webpack/runtime/compat get default export","webpack://pg-demo/webpack/runtime/define property getters","webpack://pg-demo/webpack/runtime/hasOwnProperty shorthand","webpack://pg-demo/webpack/runtime/make namespace object","webpack://pg-demo/./src/index.ts"],"sourcesContent":["import knex from 'knex';\nimport knexStringCase from 'knex-stringcase';\n\nconst knexOptions = {\n  client: 'postgresql',\n  debug: process.env.DEBUG_KNEX === 'true',\n  connection: {\n    host: process.env.PG_HOST,\n    database: process.env.PG_DATABASE,\n    user: process.env.DB_USER,\n    password: process.env.PG_PASSWORD,\n  },\n  pool: {\n    min: 2,\n    max: 10,\n  },\n  migrations: {\n    tableName: 'knex_migrations',\n  },\n};\n\nexport const database = knex(knexStringCase(knexOptions));\n","// The context function is typically used to handle things like cookies, authentication, jwt\n// When running the graphql server as express, the express req and res objects are available to it\nimport { logGraphQlQueries } from './logGraphQlQueries';\n\ninterface Props {\n  req: {\n    acceptsLanguages: (...args: string[]) => string;\n    body: { query?: string; variables?: string };\n    headers: object;\n    language?: string;\n    user?: { id: string };\n  };\n  res: object;\n}\n\n// DO NOT THROW ERRORS IN THE CONTEXT FUNCTION - if you do the GraphQL server will 400\nexport const context = async ({ req, res }: Props) => {\n  // our data is in English and Russian. Figure out which language the client is requesting, defaulting to 'en'\n  req.language = req.acceptsLanguages('en', 'ru') || 'en';\n\n  // optionally log graphql queries\n  if (process.env.LOG_GRAPHQL !== 'none') logGraphQlQueries({ req });\n  return { req, res };\n};\n","// see https://www.graphql-scalars.dev/docs/usage/apollo-server for more on graphql-scalars\n\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { mutations } from '../mutations';\nimport { resolvers } from '../resolvers';\nimport { resolvers as scalarResolvers } from 'graphql-scalars';\nimport { typeDefs } from '../typedefs';\n\nexport const schema = makeExecutableSchema({\n  typeDefs,\n  resolvers: { ...scalarResolvers, ...resolvers, ...mutations },\n});\n","interface Props {\n  req: {\n    body: { query?: string; variables?: string };\n    language?: string;\n    user?: { id: string };\n  };\n}\n\nexport const logGraphQlQueries = ({ req }: Props) => {\n  try {\n    if (process.env.LOG_GRAPHQL === 'verbose') {\n      if (req.body.query) console.log(req.body.query);\n      if (req.body.variables) console.log(req.body.variables);\n    } else if (process.env.LOG_GRAPHQL === 'compact') {\n      const queryName = req.body.query\n        .split('\\n')[1]\n        .trim()\n        .split(' ')[0]\n        .split('(')[0];\n      const operationName = req.body.query.split(' ')[0];\n      const userString = req.user?.id\n        ? `for user ${req.user.id}`\n        : '(unauthenticated)';\n      console.log(`${operationName} ${queryName} ${userString}`);\n    }\n  } catch (error) {\n    console.error(error.name);\n  }\n};\n","import { database } from '../../apis/database';\nexport const mutations = () => {};\n","import { queryResolvers } from './queries';\nexport const resolvers = { ...queryResolvers };\n","import { database } from '../../../apis/database';\n\nexport const allAirports = async () => {\n  const airports = await database('airports').select(['*']);\n  return airports;\n};\n","import { allAirports } from './allAirports';\nexport const queryResolvers = {\n  Query: {\n    allAirports,\n  },\n};\n","import { gql } from 'apollo-server';\nimport { typeDefs as scalarTypeDefs } from 'graphql-scalars';\n\nexport const typeDefs = [\n  ...scalarTypeDefs,\n  gql`\n    \"\"\"\n    Classes of service\n    \"\"\"\n    enum FareConditions {\n      Business\n      Comfort\n      Economy\n    }\n\n    \"\"\"\n    The *current* status of a flight\n    \"\"\"\n    enum FlightStatus {\n      Departed\n      Arrived\n      On\n      Time\n      Cancelled\n      Delayed\n      Scheduled\n    }\n    \"\"\"\n    Represents a kind of aircraft (not to be confused with a particular *instance* of an aircraft)\n    \"\"\"\n    type Aircraft {\n      \"\"\"\n      For the purpose of this demo the id == the aircraftCode\n      \"\"\"\n      id: ID!\n      \"\"\"\n      A string representing the type of aircraft\n      \"\"\"\n      aircraftCode: String\n      \"\"\"\n      The model of the aircraft, in the language requested by the client\n      \"\"\"\n      model: String\n      \"\"\"\n      The range of this type of aircraft in miles\n      \"\"\"\n      range: NonNegativeInt\n    }\n\n    \"\"\"\n    An airport is the source and destination for flights\n    \"\"\"\n    type Airport {\n      \"\"\"\n      For the purpose of this demo the id == the airportCode\n      \"\"\"\n      id: ID!\n      \"\"\"\n      The 3 letter airport code, globally unique\n      \"\"\"\n      airportCode: String\n      \"\"\"\n      The name of the airport in the language requested by the client\n      \"\"\"\n      airportName: String\n      \"\"\"\n      The name of the city that the airport serves in the language requested by the client\n      \"\"\"\n      city: String\n      coordinates: Point\n      timezone: String\n    }\n\n    \"\"\"\n    Represents a financial transaction involving 1 or more tickets\n    \"\"\"\n    type Booking {\n      \"\"\"\n      For the purpose of this demo the id of the booking == the reference\n      \"\"\"\n      id: ID!\n      \"\"\"\n      The date the booking was made\n      \"\"\"\n      bookedAt: DateTime!\n      \"\"\"\n      The classic 6 character code (it cannot be unique once the number of bookings exceeds 308M)\n      \"\"\"\n      reference: String!\n      \"\"\"\n      The amount paid. In the demo database this happens to be in Rubles\n      \"\"\"\n      totalAmount: Float!\n      \"\"\"\n      The ticket(s) that are linked to this booking\n      \"\"\"\n      tickets: [Ticket]\n    }\n\n    \"\"\"\n    A flight represents an aircraft flying between two airports on a particular date\n    \"\"\"\n    type Flight {\n      id: ID!\n      actual: TimeInterval\n      aircraft: Aircraft!\n      arrivalAirport: Airport!\n      departureAirport: Airport!\n      \"\"\"\n      The flight number is a string where the first 2 characters represent the airline and the remaining digits represent the route\n      \"\"\"\n      flightNo: String!\n      scheduled: TimeInterval!\n      status: FlightStatus!\n    }\n\n    \"\"\"\n    Represents a passenger's journey from one airport to another on a given flight.\n    \"\"\"\n    type Leg {\n      id: ID!\n      amount: Float!\n      boardingNo: NonNegativeInt\n      fareConditions: FareConditions!\n      flight: Flight!\n      seatNo: String\n      ticket: Ticket!\n      passenger: Passenger!\n    }\n\n    \"\"\"\n    The coordinates of a place on earth\n    \"\"\"\n    type Point {\n      latitude: Latitude\n      longitude: Longitude\n    }\n\n    \"\"\"\n    A person who is traveling\n    \"\"\"\n    type Passenger {\n      id: ID!\n      email: EmailAddress\n      name: String!\n      phone: PhoneNumber\n    }\n\n    \"\"\"\n    An aircraft has a number of seats each with their own number-letter code\n    \"\"\"\n    type Seat {\n      seatNo: String\n      aircraft: Aircraft\n      fareConditions: FareConditions!\n    }\n\n    \"\"\"\n    A ticket is issued to an individual Passenger. It may include 1-N legs\n    \"\"\"\n    type Ticket {\n      id: ID!\n      booking: Booking!\n      legs: [Leg]\n      passenger: Passenger!\n      ticketNo: String!\n    }\n\n    \"\"\"\n    The TimeInterval type is a pair of departure and arrival times.\n    It can be used for either scheduled or actual time pairs.\n    \"\"\"\n    type TimeInterval {\n      depart: DateTime\n      arrive: DateTime\n    }\n\n    type Query {\n      \"\"\"\n      Return all airports in the database\n      \"\"\"\n      allAirports: [Airport]\n    }\n  `,\n];\n","module.exports = require(\"@graphql-tools/schema\");","module.exports = require(\"apollo-server\");","module.exports = require(\"graphql-scalars\");","module.exports = require(\"knex\");","module.exports = require(\"knex-stringcase\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ApolloServer } from 'apollo-server';\nimport { context } from './graphql/apollo/context';\nimport { schema } from './graphql/apollo/executableSchema'; // this includes both typeDefs and resolvers\n\nexport const server = new ApolloServer({\n  schema,\n  context,\n  cors: { origin: true, credentials: true },\n  introspection: process.env.NODE_ENV !== 'production', // disable schema introspection in prod\n});\n\n// The `listen` method launches a web server (no need for express)\nvoid server.listen(process.env.PORT).then(() => {\n  console.log(\n    `🚀 Server ready at http://${process.env.HOST}:${process.env.PORT}`\n  );\n});\n\nif (module.hot) {\n  module.hot.accept();\n  module.hot.dispose(void server.stop());\n}\n"],"names":[],"sourceRoot":""}